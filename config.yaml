port: '8080' # Порт, на котором будет работать балансировщик
backend_servers: # Список адресов бэкенд-серверов (имена сервисов Docker)
  - 'http://backend1:80'
  - 'http://backend2:80'
  # - 'http://backend3:80' # Можно добавить больше сервисов

# Алгоритм балансировки нагрузки
# Допустимые значения: "round_robin" (по умолчанию), "random"
load_balancing_algorithm: 'random'

# Настройки Rate Limiter (Token Bucket)
rate_limiter:
  enabled: true # Включить/выключить Rate Limiter
  # Устанавливаем rate = 5 / 60 токенов в секунду
  default_rate: 0.08333 # ~5 токенов в минуту
  default_capacity: 100 # Емкость корзины (максимум токенов) по умолчанию для каждого IP

  # Тип хранилища: "memory" или "sqlite"
  store_type: sqlite
  database_path: ./rate_limits.db

  # Имя HTTP-заголовка для идентификации клиента (например, X-Client-ID, X-Api-Key).
  # Если заголовок присутствует, его значение используется как clientID.
  # Если заголовок отсутствует или пуст, используется IP-адрес.
  identifier_header: 'X-Client-ID'

# Настройки проверки состояния бэкендов
health_check:
  enabled: true # Включить проверки состояния
  interval: '15s' # Как часто проверять каждый бэкенд (например, "10s", "1m")
  timeout: '3s' # Сколько ждать ответа от бэкенда (например, "2s")
  path: '/healthz' # Путь для проверки на бэкенде (должен возвращать 2xx статус)

# TODO: Добавить возможность настройки лимитов для конкретных клиентов (IP/API-ключей)
