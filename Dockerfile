# ---- Builder Stage ----
# Используем официальный образ Go в качестве базового для сборки.
# Выбираем версию Alpine для уменьшения размера.
# Указываем версию Go, соответствующую go.mod (или новее).
FROM golang:1.24-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера.
WORKDIR /app

# Копируем файлы управления зависимостями.
# Копируем их отдельно, чтобы использовать кэширование Docker.
# Зависимости будут переустанавливаться только при изменении go.mod или go.sum.
COPY go.mod go.sum ./

# Загружаем зависимости.
RUN go mod download

# Копируем исходный код приложения.
COPY . .

# Собираем приложение.
# -o /balancer указывает, что скомпилированный бинарник нужно поместить в корень файловой системы контейнера под именем 'balancer'.
# CGO_ENABLED=0 отключает CGO, что позволяет создать статически слинкованный бинарник, не зависящий от C-библиотек базового образа.
# -ldflags "-s -w" убирает отладочную информацию и символы, уменьшая размер бинарника.
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o /balancer cmd/balancer/main.go

# ---- Final Stage ----
# Используем минимальный образ Alpine Linux.
FROM alpine:latest

# Устанавливаем рабочую директорию.
WORKDIR /app

# Копируем скомпилированный бинарник из builder stage.
COPY --from=builder /balancer /app/balancer

# Копируем файл конфигурации.
# Убедитесь, что config.yaml находится в том же каталоге, что и Dockerfile при сборке.
COPY config.yaml /app/config.yaml

# Открываем порт, который слушает балансировщик (по умолчанию 8080).
# Это значение должно соответствовать порту в config.yaml.
EXPOSE 8080

# Команда для запуска приложения при старте контейнера.
# Запускаем наш скомпилированный бинарник.
CMD ["/app/balancer"] 